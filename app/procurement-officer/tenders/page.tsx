'use client'

import { useState, useEffect, SyntheticEvent } from 'react'
import Image from "next/image"
import { DashboardLayout } from "@/components/dashboard-layout"
import { TenderCard } from "@/components/tender-card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogFooter,
} from "@/components/ui/dialog"
import { getTenders, createTender, updateTender, deleteTender } from "@/app/actions/tender-actions"

interface Tender {
  id: string;
  title: string;
  sector: string;
  location: string;
  issuer: string;
  description: string;
  closingDate: string;
  status: string;
  awardedTo: string;
  amount: number;
  awardDate: string;
}

export default function TendersPage() {
  const [tenders, setTenders] = useState<Tender[]>([])
  const [isCreating, setIsCreating] = useState(false)
  const [isEditing, setIsEditing] = useState(false)
  const [currentTender, setCurrentTender] = useState<Tender | null>(null)

  useEffect(() => {
    getTenders().then(setTenders)
  }, [])

  const handleCreate = async (event: React.SyntheticEvent) => {
    event.preventDefault();
    const formData = new FormData(event.target as HTMLFormElement);
    const tenderData = {
      id: '',  // This will be generated by the server
      title: formData.get('title') as string,
      sector: formData.get('sector') as string,
      location: formData.get('location') as string,
      issuer: formData.get('issuer') as string,
      description: formData.get('description') as string,
      closingDate: formData.get('closingDate') as string,
      status: '',
      awardedTo: '',
      amount: 0,
      awardDate: '',
    };
    const newTender = await createTender(tenderData);
    setTenders([...tenders, newTender]);
    setIsCreating(false);
  };

/**
 * Handles the form submission for updating an existing tender.
 * Prevents the default form submission behavior, extracts form data,
 * and updates the current tender using the provided tender data.
 * Updates the tenders list with the updated tender and exits edit mode.
 *
 * @param {React.SyntheticEvent} event - The form submission event.
 */

const handleUpdate = async (event: React.SyntheticEvent) => {
  event.preventDefault()
  const formData = new FormData(event.target as HTMLFormElement)
  const tenderData = Object.fromEntries(formData)
  const updatedTender = await updateTender(currentTender?.id??'', tenderData)
  if (updatedTender) {
    setTenders(tenders.map(tender => tender.id === updatedTender.id ? updatedTender : tender))
  }
  setIsEditing(false)
}

  const handleDelete = async (id: string) => {
    if (window.confirm('Are you sure you want to delete this tender?')) {
      await deleteTender(id)
      setTenders(tenders.filter(tender => tender.id !== id))
    }
  }

  return (
    <DashboardLayout>
      <header className="flex items-center justify-between border-b bg-white px-8 py-4">
        <div>
          <h1 className="text-2xl font-semibold text-[#4B0082]">Tenders</h1>
          <p className="text-sm text-gray-600">Manage all tender offers here</p>
        </div>
        <div className="flex items-center gap-3">
          <div className="text-right">
            <p className="font-medium text-gray-900">John Mwangi</p>
            <p className="text-sm text-gray-600">Procurement Officer, Ministry of Finance</p>
          </div>
          <div className="relative h-12 w-12">
            <Image
              src="/placeholder.svg"
              alt="Profile picture"
              fill
              className="rounded-full object-cover"
            />
            <span className="absolute right-0 top-0 h-3 w-3 rounded-full border-2 border-white bg-green-400" />
          </div>
        </div>
      </header>
      <main className="p-8">
        <div className="mb-6 flex bg-purple justify-end">
          <Button onClick={() => setIsCreating(true)}>Create New Tender</Button>
        </div>
        <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
          {tenders.map((tender) => (
            <TenderCard 
              key={tender.id} 
              {...tender} 
              onEdit={() => {
                setCurrentTender(tender)
                setIsEditing(true)
              }}
              onDelete={() => handleDelete(tender.id)}
            />
          ))}
        </div>
      </main>

      <Dialog open={isCreating} onOpenChange={setIsCreating}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Create New Tender</DialogTitle>
          </DialogHeader>
          <form onSubmit={handleCreate}>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="title" className="text-right">
                  Title
                </Label>
                <Input id="title" name="title" className="col-span-3" required />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="sector" className="text-right">
                  Sector
                </Label>
                <Input id="sector" name="sector" className="col-span-3" required />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="location" className="text-right">
                  Location
                </Label>
                <Input id="location" name="location" className="col-span-3" required />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="issuer" className="text-right">
                  Issuer
                </Label>
                <Input id="issuer" name="issuer" className="col-span-3" required />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="description" className="text-right">
                  Description
                </Label>
                <Textarea id="description" name="description" className="col-span-3" required />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="closingDate" className="text-right">
                  Closing Date
                </Label>
                <Input id="closingDate" name="closingDate" type="datetime-local" className="col-span-3" required />
              </div>
            </div>
            <DialogFooter>
              <Button type="submit">Create Tender</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      <Dialog open={isEditing} onOpenChange={setIsEditing}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit Tender</DialogTitle>
          </DialogHeader>
          <form onSubmit={handleUpdate}>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="title" className="text-right">
                  Title
                </Label>
                <Input id="title" name="title" defaultValue={currentTender?.title} className="col-span-3" required />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="sector" className="text-right">
                  Sector
                </Label>
                <Input id="sector" name="sector" defaultValue={currentTender?.sector} className="col-span-3" required />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="location" className="text-right">
                  Location
                </Label>
                <Input id="location" name="location" defaultValue={currentTender?.location} className="col-span-3" required />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="issuer" className="text-right">
                  Issuer
                </Label>
                <Input id="issuer" name="issuer" defaultValue={currentTender?.issuer} className="col-span-3" required />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="description" className="text-right">
                  Description
                </Label>
                <Textarea id="description" name="description" defaultValue={currentTender?.description} className="col-span-3" required />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="closingDate" className="text-right">
                  Closing Date
                </Label>
                <Input 
                  id="closingDate" 
                  name="closingDate" 
                  type="datetime-local" 
                  defaultValue={currentTender?.closingDate ? new Date(currentTender.closingDate).toISOString().slice(0, 16) : ''} 
                  className="col-span-3" 
                  required
                />
              </div>
            </div>
            <DialogFooter>
              <Button type="submit">Update Tender</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </DashboardLayout>
  )
}