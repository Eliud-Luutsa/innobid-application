// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  password          String
  role              Role      @default(VENDOR)
  company           String?
  phone             String?
  businessType      String?   // e.g., "Profit", "Non-Profit", "Academic"
  registrationNumber String?
  address           String?
  city              String?
  country           String?
  postalCode        String?
  website           String?
  establishmentDate DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  tenders           Tender[] @relation("TenderIssuer")
  bids              Bid[]
  documents         Document[]
  notifications     Notification[]
  feedbacks         Feedback[]
  supportTickets    SupportTicket[]
  reports           Report[]
  procuredTenders   Tender[] @relation("TenderProcurementOfficer")
}

model Tender {
  id          String    @id @default(uuid())
  title       String
  description String
  sector      String
  category    String
  location    String
  budget      Float
  requirements String[]
  closingDate DateTime
  issuer      User      @relation("TenderIssuer", fields: [issuerId], references: [id])
  issuerId    Int
  status      TenderStatus @default(OPEN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bids        Bid[]
  documents   Document[]
  feedbacks   Feedback[]
  reports     Report[]
  procurementOfficerId Int?
  procurementOfficer   User? @relation("TenderProcurementOfficer", fields: [procurementOfficerId], references: [id])
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
  awardedBidId String?
}

model Bid {
  id               String    @id @default(uuid())
  tender           Tender    @relation(fields: [tenderId], references: [id])
  tenderId         String
  bidder           User      @relation(fields: [bidderId], references: [id])
  bidderId         Int
  amount           Float
  completionTime   String?   // New field for estimated completion timeline
  technicalProposal String
  vendorExperience String?   // New field for vendor's relevant experience
  status           BidStatus @default(PENDING)
  submissionDate   DateTime  @default(now())
  evaluationScore  Float?
  documents        Document[]
  approvalDate     DateTime?
  statusUpdatedAt  DateTime?
}

model Document {
  id        String    @id @default(uuid())
  fileName  String
  fileSize  Int
  fileType  String
  url       String
  s3Key     String?   // New field to store S3 object key
  uploadDate DateTime @default(now())
  tender    Tender?   @relation(fields: [tenderId], references: [id])
  tenderId  String?
  bid       Bid?      @relation(fields: [bidId], references: [id])
  bidId     String?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
}

model Notification {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  type      NotificationType
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
}

model Feedback {
  id        String    @id @default(uuid())
  tender    Tender    @relation(fields: [tenderId], references: [id])
  tenderId  String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  rating    Int
  comment   String
  createdAt DateTime  @default(now())
}

model SupportTicket {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  subject   String
  message   String
  status    TicketStatus @default(OPEN)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Report {
  id          String    @id @default(uuid())
  tender      Tender    @relation(fields: [tenderId], references: [id])
  tenderId    String
  reporter    User      @relation(fields: [reporterId], references: [id])
  reporterId  Int
  type        ReportType
  description String
  status      ReportStatus @default(PENDING)
  evidence    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  tenders   Tender[]
}

enum Role {
  PROCUREMENT
  VENDOR
  CITIZEN
}

enum TenderStatus {
  OPEN
  CLOSED
  AWARDED
  CANCELLED
}

enum BidStatus {
  PENDING
  EVALUATED
  ACCEPTED
  REJECTED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ReportType {
  IRREGULARITY
  FRAUD
  CONFLICT_OF_INTEREST
  OTHER
}

enum ReportStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  DISMISSED
}

enum TenderCategory {
  GOODS
  SERVICES
  WORKS
  CONSULTING
}
