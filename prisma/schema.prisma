generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           Int             @id @default(autoincrement())
  name                         String
  email                        String          @unique
  password                     String
  role                         Role            @default(VENDOR)
  emailVerified                Boolean         @default(false)
  emailVerificationToken       String?         @unique
  emailVerificationTokenExpiry DateTime?
  passwordResetToken           String?         @unique
  passwordResetTokenExpiry     DateTime?
  company                      String?
  phone                        String?
  businessType                 BusinessType?
  registrationNumber           String?
  address                      String?
  city                         String?
  country                      String?
  postalCode                   String?
  website                      String?
  establishmentDate            DateTime?
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @updatedAt
  bids                         Bid[]
  documents                    Document[]
  feedbacks                    Feedback[]
  notifications                Notification[]
  reports                      Report[]
  supportTickets               SupportTicket[]
  tenders                      Tender[]        @relation("TenderIssuer")
  procuredTenders              Tender[]        @relation("TenderProcurementOfficer")
}

model Tender {
  id                   String             @id @default(uuid())
  title                String
  description          String
  sector               TenderSector
  category             String
  location             String
  budget               Float
  requirements         String[]
  closingDate          DateTime
  issuerId             Int
  status               TenderStatus       @default(OPEN)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  procurementOfficerId Int?
  departmentId         Int?
  awardedBidId         String?
  bids                 Bid[]
  bidEvaluationLogs    BidEvaluationLog[]
  documents            Document[]
  feedbacks            Feedback[]
  reports              Report[]
  department           Department?        @relation(fields: [departmentId], references: [id])
  issuer               User               @relation("TenderIssuer", fields: [issuerId], references: [id])
  procurementOfficer   User?              @relation("TenderProcurementOfficer", fields: [procurementOfficerId], references: [id])
  tenderAwardLogs      TenderAwardLog[]
}

model Bid {
  id                 String             @id @default(uuid())
  tenderId           String
  bidderId           Int
  amount             Float
  completionTime     String?
  technicalProposal  String
  vendorExperience   String?
  status             BidStatus          @default(PENDING)
  submissionDate     DateTime           @default(now())
  evaluationScore    Float?
  technicalScore     Float?
  financialScore     Float?
  experienceScore    Float?
  evaluationComments String?
  approvalDate       DateTime?
  statusUpdatedAt    DateTime?
  bidder             User               @relation(fields: [bidderId], references: [id])
  tender             Tender             @relation(fields: [tenderId], references: [id])
  evaluationLogs     BidEvaluationLog[]
  documents          Document[]
  tenderAwardLogs    TenderAwardLog[]
}

model Document {
  id         String   @id @default(uuid())
  fileName   String
  fileSize   Int
  fileType   String
  url        String
  s3Key      String?
  uploadDate DateTime @default(now())
  tenderId   String?
  bidId      String?
  userId     Int
  bid        Bid?     @relation(fields: [bidId], references: [id])
  tender     Tender?  @relation(fields: [tenderId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  userId    Int
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
}

model Feedback {
  id        String   @id @default(uuid())
  tenderId  String
  userId    Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  tender    Tender   @relation(fields: [tenderId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model SupportTicket {
  id        String       @id @default(uuid())
  userId    Int
  subject   String
  message   String
  status    TicketStatus @default(OPEN)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])
}

model Report {
  id          String       @id @default(uuid())
  tenderId    String
  reporterId  Int
  type        ReportType
  description String
  status      ReportStatus @default(PENDING)
  evidence    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reporter    User         @relation(fields: [reporterId], references: [id])
  tender      Tender       @relation(fields: [tenderId], references: [id])
}

model Department {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  tenders Tender[]
}

model BidEvaluationLog {
  id              String   @id @default(uuid())
  bidId           String
  tenderId        String
  evaluatedBy     Int
  technicalScore  Float
  financialScore  Float
  experienceScore Float
  totalScore      Float
  comments        String?
  createdAt       DateTime @default(now())
  bid             Bid      @relation(fields: [bidId], references: [id])
  tender          Tender   @relation(fields: [tenderId], references: [id])
}

model TenderAwardLog {
  id        String   @id @default(uuid())
  tenderId  String
  bidId     String
  awardedBy Int
  createdAt DateTime @default(now())
  bid       Bid      @relation(fields: [bidId], references: [id])
  tender    Tender   @relation(fields: [tenderId], references: [id])
}

enum Role {
  PROCUREMENT
  VENDOR
  CITIZEN
}

enum TenderStatus {
  OPEN
  CLOSED
  AWARDED
  CANCELLED
}

enum BidStatus {
  PENDING
  EVALUATED
  ACCEPTED
  REJECTED
}

enum NotificationType {
  TENDER_AWARD
  BID_STATUS_UPDATE
  TENDER_STATUS_UPDATE
  SYSTEM_ALERT
  MESSAGE
  REMINDER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ReportType {
  IRREGULARITY
  FRAUD
  CONFLICT_OF_INTEREST
  OTHER
}

enum ReportStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  DISMISSED
}

enum TenderCategory {
  GOODS
  SERVICES
  WORKS
  CONSULTING
}

enum TenderSector {
  CONSTRUCTION
  MANUFACTURING
  SERVICES
  AGRICULTURE
  TECHNOLOGY
  HEALTHCARE
  EDUCATION
  ENERGY
  TRANSPORTATION
  FINANCE
}

enum BusinessType {
  PROFIT
  NON_PROFIT
  ACADEMIC_INSTITUTION
  GOVERNMENT_MULTI_AGENCY
  OTHERS
}
