generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           Int                    @id @default(autoincrement())
  name                         String
  email                        String                 @unique
  password                     String
  role                         Role                   @default(VENDOR)
  emailVerified                Boolean                @default(false)
  emailVerificationToken       String?                @unique
  emailVerificationTokenExpiry DateTime?
  passwordResetToken           String?                @unique
  passwordResetTokenExpiry     DateTime?
  company                      String?
  phone                        String?
  businessType                 BusinessType?
  registrationNumber           String?
  address                      String?
  city                         String?
  country                      String?
  postalCode                   String?
  website                      String?
  establishmentDate            DateTime?
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  bids                         Bid[]
  documents                    Document[]
  feedbacks                    Feedback[]
  notifications                Notification[]
  reports                      Report[]
  supportTickets               SupportTicket[]
  tenders                      Tender[]               @relation("TenderIssuer")
  procuredTenders              Tender[]               @relation("TenderProcurementOfficer")
  tenderHistory                TenderHistory[]
  evaluationCommittees         EvaluationCommittee[]
  clarificationRequests        ClarificationRequest[] @relation("RequestedByUser")
  evaluatedBids                BidEvaluationLog[]     @relation("EvaluatedBy")
  evaluatedStages              EvaluationStage[]      @relation("Evaluator")
  awardedTenders               Tender[]               @relation("AwardedTenders")
}

model Tender {
  id                   String                  @id @default(uuid())
  title                String
  description          String
  sector               TenderSector
  category             TenderCategory
  location             String
  budget               Float
  requirements         String[]
  closingDate          DateTime
  issuerId             Int
  status               TenderStatus            @default(OPEN)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  procurementOfficerId Int?
  departmentId         Int?
  awardedBidId         String?
  awardedBy            User?                   @relation("AwardedTenders", fields: [awardedById], references: [id])
  awardedById          Int?
  bids                 Bid[]
  bidEvaluationLogs    BidEvaluationLog[]
  documents            Document[]
  feedbacks            Feedback[]
  reports              Report[]
  department           Department?             @relation(fields: [departmentId], references: [id])
  issuer               User                    @relation("TenderIssuer", fields: [issuerId], references: [id])
  procurementOfficer   User?                   @relation("TenderProcurementOfficer", fields: [procurementOfficerId], references: [id])
  tenderAwardLogs      TenderAwardLog[]
  history              TenderHistory[]
  evaluationCriteria   BidEvaluationCriteria[]
  evaluationCommittee  EvaluationCommittee[]
}

model Bid {
  id                    String                 @id @default(cuid())
  tenderId              String
  bidderId              Int
  amount                Float
  status                BidStatus              @default(PENDING)
  submissionDate        DateTime               @default(now())
  completionTime        String
  technicalProposal     String
  vendorExperience      String?
  documents             Document[]
  evaluationStages      EvaluationStage[]
  tender                Tender                 @relation(fields: [tenderId], references: [id])
  bidder                User                   @relation(fields: [bidderId], references: [id])
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  evaluationLogs        BidEvaluationLog[]
  awardLogs             TenderAwardLog[]
  clarificationRequests ClarificationRequest[]

  @@unique([tenderId, bidderId]) // Ensure one bid per vendor per tender
}

model Document {
  id         String   @id @default(uuid())
  fileName   String
  fileSize   Int
  fileType   String
  url        String
  s3Key      String?
  uploadDate DateTime @default(now())
  tenderId   String?
  bidId      String?
  userId     Int
  bid        Bid?     @relation(fields: [bidId], references: [id])
  tender     Tender?  @relation(fields: [tenderId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  Report     Report?  @relation("ReportAttachments", fields: [reportId], references: [id])
  reportId   String?
}

model Notification {
  id        String   @id @default(cuid())
  type      String // TENDER, BID, SUPPORT_TICKET, SYSTEM
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int // Changed from String to Int to match User model
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Feedback {
  id        String   @id @default(uuid())
  tenderId  String
  userId    Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  tender    Tender   @relation(fields: [tenderId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model SupportTicket {
  id        String       @id @default(uuid())
  userId    Int
  subject   String
  message   String
  status    TicketStatus @default(OPEN)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])
}

model Report {
  id          String       @id @default(cuid())
  tenderId    String
  tender      Tender       @relation(fields: [tenderId], references: [id])
  type        ReportType
  description String
  status      ReportStatus @default(PENDING)
  reporterId  Int
  reporter    User         @relation(fields: [reporterId], references: [id])
  attachments Document[]   @relation("ReportAttachments")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Department {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  tenders Tender[]
}

model BidEvaluationLog {
  id              String   @id @default(cuid())
  bidId           String
  bid             Bid      @relation(fields: [bidId], references: [id])
  stage           String
  totalScore      Float
  comments        String?
  evaluatedBy     Int
  evaluatorId     Int
  evaluator       User     @relation("EvaluatedBy", fields: [evaluatedBy], references: [id])
  createdAt       DateTime @default(now())
  tenderId        String
  tender          Tender   @relation(fields: [tenderId], references: [id])
  technicalScore  Float
  financialScore  Float
  experienceScore Float

  @@index([bidId])
  @@index([tenderId])
  @@index([evaluatedBy])
}

model TenderAwardLog {
  id        String   @id @default(uuid())
  tenderId  String
  bidId     String
  awardedBy Int
  createdAt DateTime @default(now())
  bid       Bid      @relation(fields: [bidId], references: [id])
  tender    Tender   @relation(fields: [tenderId], references: [id])
}

model TenderHistory {
  id             String       @id @default(cuid())
  tenderId       String
  tender         Tender       @relation(fields: [tenderId], references: [id])
  status         TenderStatus
  changedBy      Int
  changedByUser  User         @relation(fields: [changedBy], references: [id])
  changeDate     DateTime     @default(now())
  comments       String?      @db.Text
  previousValues Json?
  newValues      Json?

  @@index([tenderId])
  @@index([changedBy])
}

model BidEvaluationCriteria {
  id           String  @id @default(cuid())
  tenderId     String
  tender       Tender  @relation(fields: [tenderId], references: [id])
  criteriaName String
  weight       Float
  description  String? @db.Text
  minScore     Float?
  maxScore     Float

  @@index([tenderId])
}

model EvaluationCommittee {
  id            String   @id @default(cuid())
  tenderId      String
  tender        Tender   @relation(fields: [tenderId], references: [id])
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  role          String // CHAIRMAN, SECRETARY, MEMBER
  appointedDate DateTime @default(now())
  active        Boolean  @default(true)

  @@index([tenderId])
  @@index([userId])
}

model ClarificationRequest {
  id              String    @id @default(cuid())
  bidId           String
  bid             Bid       @relation(fields: [bidId], references: [id])
  question        String    @db.Text
  response        String?   @db.Text
  requestedBy     Int
  requestedByUser User      @relation("RequestedByUser", fields: [requestedBy], references: [id])
  requestDate     DateTime  @default(now())
  responseDate    DateTime?
  status          String // PENDING, ANSWERED, CLOSED

  @@index([bidId])
}

model EvaluationStage {
  id          String    @id @default(cuid())
  bidId       String
  bid         Bid       @relation(fields: [bidId], references: [id])
  stage       String // INITIAL, TECHNICAL, FINANCIAL, FINAL
  score       Float
  status      BidStatus
  comments    String?
  evaluatedBy Int
  evaluator   User      @relation("Evaluator", fields: [evaluatedBy], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([bidId])
  @@index([evaluatedBy])
}

enum Role {
  PROCUREMENT
  VENDOR
  CITIZEN
}

enum TenderStatus {
  OPEN
  CLOSED
  AWARDED
  CANCELLED
}

enum BidStatus {
  PENDING
  UNDER_REVIEW
  TECHNICAL_EVALUATION
  SHORTLISTED
  COMPARATIVE_ANALYSIS
  FINAL_EVALUATION
  ACCEPTED
  REJECTED
}

enum NotificationType {
  TENDER_AWARD
  BID_STATUS_UPDATE
  TENDER_STATUS_UPDATE
  SYSTEM_ALERT
  MESSAGE
  REMINDER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ReportType {
  IRREGULARITY
  FRAUD
  CONFLICT_OF_INTEREST
  OTHER
}

enum ReportStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  DISMISSED
}

enum TenderCategory {
  GOODS
  SERVICES
  WORKS
  CONSULTING
}

enum TenderSector {
  CONSTRUCTION
  MANUFACTURING
  SERVICES
  AGRICULTURE
  TECHNOLOGY
  HEALTHCARE
  EDUCATION
  ENERGY
  TRANSPORTATION
  FINANCE
}

enum BusinessType {
  PROFIT
  NON_PROFIT
  ACADEMIC_INSTITUTION
  GOVERNMENT_MULTI_AGENCY
  OTHERS
}
